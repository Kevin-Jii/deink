// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// DrinksDao is the data access object for table drinks.
type DrinksDao struct {
	table   string        // table is the underlying table name of the DAO.
	group   string        // group is the database configuration group name of current DAO.
	columns DrinksColumns // columns contains all the column names of Table for convenient usage.
}

// DrinksColumns defines and stores column names for table drinks.
type DrinksColumns struct {
	Id                string // 酒水种类ID
	Name              string // 酒水名称
	SellingPrice      string // 售价
	CreatedAt         string // 创建时间
	UpdatedAt         string // 更新时间
	PurchasePrice     string // 进价
	IsIncludedInCombo string // 是否包含在套餐中
}

// drinksColumns holds the columns for table drinks.
var drinksColumns = DrinksColumns{
	Id:                "id",
	Name:              "name",
	SellingPrice:      "selling_price",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
	PurchasePrice:     "purchase_price",
	IsIncludedInCombo: "is_included_in_combo",
}

// NewDrinksDao creates and returns a new DAO object for table data access.
func NewDrinksDao() *DrinksDao {
	return &DrinksDao{
		group:   "default",
		table:   "drinks",
		columns: drinksColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *DrinksDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *DrinksDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *DrinksDao) Columns() DrinksColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *DrinksDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *DrinksDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *DrinksDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
